Predict: get a string ` [!hello]*.txt ` to a string ` [!hello]*.txt `
Gold: list all the files that does n't contain the name ` hello `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["glob"], ["<unk>"], ["Name"], ["glob"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> list all the files that does n't contain the name ` hello ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: list all the files that does n't contain the name ` hello ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` l `
Gold: split elements of a list ` l ` by ' '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["ListComp"], ["elt"], ["generators"], ["Subscript"], ["comprehension"], ["value"], ["slice"], ["target"], ["iter"], ["ifs"], ["Call"], ["Index"], ["Name"], ["Name"], ["Compare"], ["func"], ["args"], ["keywords"], ["value"], ["i"], ["l"], ["left"], ["ops"], ["comparators"], ["Attribute"], ["Str"], ["UnaryOp"], ["Str"], ["In"], ["Name"], ["value"], ["<unk>"], ["<pad>"], ["op"], ["operand"], ["<pad>"], ["i"], ["Name"], ["USub"], ["Num"], ["i"], ["1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> split elements of a list ` l ` by ' ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: split elements of a list ` l ` by ' ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` walls `
Gold: convert the sum of list ` walls ` into a hex presentation
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["hex"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["sum"], ["elt"], ["generators"], ["BinOp"], ["comprehension"], ["left"], ["op"], ["right"], ["target"], ["iter"], ["ifs"], ["Name"], ["<unk>"], ["Name"], ["Tuple"], ["Call"], ["b"], ["i"], ["elts"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["Call"], ["i"], ["b"], ["enumerate"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["reversed"], ["walls"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert the sum of list ` <unk> ` into a hex <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert the sum of list ` <unk> ` into a hex <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` mylist `
Gold: loop through ` mylist ` with step 2
Tree: [["Module"], ["body"], ["For"], ["target"], ["iter"], ["body"], ["orelse"], ["Name"], ["Subscript"], ["Pass"], ["i"], ["value"], ["slice"], ["Name"], ["Slice"], ["mylist"], ["lower"], ["upper"], ["step"], ["Num"], ["2"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> through ` mylist ` with <unk> 2 <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> through ` mylist ` with <unk> 2 <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` words `
Gold: check if all string elements in list ` words ` are upper-cased
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["print"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["all"], ["elt"], ["generators"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Attribute"], ["Name"], ["Name"], ["value"], ["<unk>"], ["word"], ["words"], ["Subscript"], ["value"], ["slice"], ["Name"], ["Index"], ["word"], ["value"], ["Num"], ["0"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> check if all string elements in list ` words ` are <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: check if all string elements in list ` words ` are <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` line ` to a string ` line `
Gold: get value in string ` line ` matched by regex pattern ' \bLOG_ADDR\s+(\S+) '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["print"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Num"], ["value"], ["group"], ["1"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Name"], ["value"], ["search"], ["<unk>"], ["line"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get value in string ` line ` <unk> by regex pattern ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get value in string ` line ` <unk> by regex pattern ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` start excel.exe <path/to/file> ` to a string ` start excel.exe <path/to/file> `
Gold: how can i launch an instance of an application using python ?
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["system"], ["<unk>"], ["Name"], ["os"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> how can i <unk> an instance of an application using python ? <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: how can i <unk> an instance of an application using python ? <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` , ` in a list ` , `
Gold: convert a string of numbers ` example_string ` separated by ` , ` into a list of integers
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Call"], ["map"], ["int"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["split"], [","], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert a string of numbers ` <unk> ` separated by ` , ` into a list of integers <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert a string of numbers ` <unk> ` separated by ` , ` into a list of integers <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` s `
Gold: convert a string ` s ` containing hex bytes to a hex string
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["value"], ["<unk>"], ["s"], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert a string ` s ` containing hex bytes to a hex string <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert a string ` s ` containing hex bytes to a hex string <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` CreateSymbolicLinkW ` to a string ` CreateSymbolicLinkW `
Gold: create a symlink directory ` D:\testdirLink ` for directory ` D:\testdir ` with unicode support using ctypes library
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["Num"], ["value"], ["<unk>"], ["<unk>"], ["<unk>"], ["1"], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create a <unk> directory ` <unk> ` for directory ` <unk> ` with unicode <unk> using <unk> <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create a <unk> directory ` <unk> ` for directory ` <unk> ` with unicode <unk> using <unk> <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` _id ` in a list ` _id `
Gold: insert a new field ' geolocCountry ' on an existing document ' b ' using pymongo
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Dict"], ["Dict"], ["value"], ["update"], ["keys"], ["values"], ["keys"], ["values"], ["Attribute"], ["Str"], ["Subscript"], ["Str"], ["Dict"], ["value"], ["<unk>"], ["_id"], ["value"], ["slice"], ["<unk>"], ["keys"], ["values"], ["Name"], ["Name"], ["Index"], ["Str"], ["Name"], ["db"], ["b"], ["value"], ["<unk>"], ["<unk>"], ["Str"], ["_id"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> insert a new field ' <unk> ' on an <unk> <unk> ' b ' using <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: insert a new field ' <unk> ' on an <unk> <unk> ' b ' using <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` id ` to a string ` id `
Gold: evaluate a nested dictionary ` myobject.id.number ` to get ` number ` if ` myobject ` is present with getattr
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["Str"], ["NameConstant"], ["getattr"], ["func"], ["args"], ["keywords"], ["number"], ["value"], ["Name"], ["Name"], ["Str"], ["NameConstant"], ["getattr"], ["<unk>"], ["id"], ["value"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> a nested dictionary ` <unk> ` to get ` number ` if ` <unk> ` is present with <unk> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> a nested dictionary ` <unk> ` to get ` number ` if ` <unk> ` is present with <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` a ` to a list ` a `
Gold: create a list containing all cartesian products of elements in list ` a `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["list"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Starred"], ["value"], ["product"], ["value"], ["Name"], ["Name"], ["itertools"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create a list containing all <unk> <unk> of elements in list ` a ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create a list containing all <unk> <unk> of elements in list ` a ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` lst `
Gold: empty a list ` lst `
Tree: [["Module"], ["body"], ["Delete"], ["targets"], ["Subscript"], ["value"], ["slice"], ["Name"], ["Slice"], ["lst"], ["lower"], ["upper"], ["step"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> empty a list ` lst ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: empty a list ` lst ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` s ` to a string ` s `
Gold: delete self-contained digits from string ` s `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["s"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["Name"], ["value"], ["sub"], ["<unk>"], ["<pad>"], ["s"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> delete <unk> digits from string ` s ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: delete <unk> digits from string ` s ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: sort a list ` bar ` in a list ` x `
Gold: sort list ` bar ` by each element 's attribute ` attrb1 ` and attribute ` attrb2 ` in reverse order
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["keyword"], ["value"], ["sort"], ["key"], ["value"], ["reverse"], ["value"], ["Name"], ["Lambda"], ["NameConstant"], ["bar"], ["args"], ["body"], ["True"], ["arguments"], ["Tuple"], ["args"], ["vararg"], ["kwonlyargs"], ["kw_defaults"], ["kwarg"], ["defaults"], ["elts"], ["arg"], ["Attribute"], ["Attribute"], ["x"], ["annotation"], ["value"], ["<unk>"], ["value"], ["<unk>"], ["Name"], ["Name"], ["x"], ["x"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort list ` bar ` by each element 's attribute ` <unk> ` and attribute ` <unk> ` in reverse order <pad> <pad> <pad> <pad> <pad>
Seq Out: sort list ` bar ` by each element 's attribute ` <unk> ` and attribute ` <unk> ` in reverse order <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` , `
Gold: print a list of integers ` list_of_ints ` using string formatting
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["print"], ["func"], ["args"], ["keywords"], ["Attribute"], ["GeneratorExp"], ["value"], ["join"], ["elt"], ["generators"], ["Str"], ["Call"], ["comprehension"], [","], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Name"], ["Name"], ["str"], ["x"], ["x"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> print a list of integers ` <unk> ` using string formatting <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: print a list of integers ` <unk> ` using string formatting <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` 0xdeadbeef `
Gold: convert hex string ' 0xdeadbeef ' to decimal
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["literal_eval"], ["<unk>"], ["Name"], ["ast"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert hex string ' <unk> ' to decimal <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert hex string ' <unk> ' to decimal <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` _key ` in a list ` _key `
Gold: build dictionary with keys of dictionary ` _container ` as keys and values of returned value of function ` _value ` with correlating key as parameter
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["DictComp"], ["key"], ["value"], ["generators"], ["Name"], ["Call"], ["comprehension"], ["<unk>"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Name"], ["Name"], ["<unk>"], ["<unk>"], ["<unk>"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> build dictionary with keys of dictionary ` <unk> ` as keys and values of <unk> value of function ` <unk> ` with <unk> key as parameter
Seq Out: build dictionary with keys of dictionary ` <unk> ` as keys and values of <unk> value of function ` <unk> ` with <unk> key as parameter <eos>

Predict: get a string ` Hello world, my name is...James the 2nd! ` to a string ` Hello world, my name is...James the 2nd! `
Gold: get a list of words from a string ` Hello world, my name is...James the 2nd! ` removing punctuation
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["findall"], ["<unk>"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["compile"], ["<unk>"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get a list of words from a string ` <unk> ` removing punctuation <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get a list of words from a string ` <unk> ` removing punctuation <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` s ` to a string ` s `
Gold: split string ` s ` based on white spaces
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Name"], ["value"], ["findall"], ["<unk>"], ["s"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> split string ` s ` based on white spaces <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: split string ` s ` based on white spaces <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` 2012 `
Gold: get last day of the second month in year 2012
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Num"], ["Num"], ["monthrange"], ["<unk>"], ["2"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get last day of the second month in year <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get last day of the second month in year <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` abcd ` to a string ` abcd `
Gold: create a list with permutations of string ' abcd '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["list"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["<unk>"], ["abcd"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create a list with permutations of string ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create a list with permutations of string ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: sort a list ` mylist ` with a list ` mylist `
Gold: sort list ` mylist ` alphabetically
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["sort"], ["key"], ["value"], ["Name"], ["Lambda"], ["mylist"], ["args"], ["body"], ["arguments"], ["Call"], ["args"], ["vararg"], ["kwonlyargs"], ["kw_defaults"], ["kwarg"], ["defaults"], ["func"], ["args"], ["keywords"], ["arg"], ["Attribute"], ["x"], ["annotation"], ["value"], ["lower"], ["Name"], ["x"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort list ` mylist ` alphabetically <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sort list ` mylist ` alphabetically <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` __init__ ` to a string ` __init__ `
Gold: inherit from class ` Executive `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Starred"], ["value"], ["__init__"], ["value"], ["Call"], ["Name"], ["func"], ["args"], ["keywords"], ["args"], ["Name"], ["Name"], ["Name"], ["super"], ["<unk>"], ["self"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> from class ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> from class ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df ` in a list ` df `
Gold: remove column by index ` [:, 0:2] ` in dataframe ` df `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Subscript"], ["df"], ["value"], ["slice"], ["Attribute"], ["ExtSlice"], ["value"], ["ix"], ["dims"], ["Name"], ["Slice"], ["Slice"], ["df"], ["lower"], ["upper"], ["step"], ["lower"], ["upper"], ["step"], ["Num"], ["Num"], ["0"], ["2"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> remove column by index ` <unk> <unk> ` in dataframe ` df ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: remove column by index ` <unk> <unk> ` in dataframe ` df ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` a ` in a list ` b `
Gold: destruct elements of list ` [1, 2, 3] ` to variables ` a ` , ` b ` and ` c `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Tuple"], ["List"], ["elts"], ["elts"], ["Name"], ["Name"], ["Name"], ["Num"], ["Num"], ["Num"], ["a"], ["b"], ["c"], ["1"], ["2"], ["3"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> elements of list ` [1, 2, 3] ` to variables ` a ` , ` b ` and ` c ` <pad> <pad> <pad> <pad>
Seq Out: <unk> elements of list ` [1, 2, 3] ` to variables ` a ` , ` b ` and ` c ` <eos> <pad> <pad> <pad> <pad>

Predict: get a string ` file:///my_pdf.pdf `
Gold: display a pdf file that has been downloaded as ` my_pdf.pdf `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["open"], ["<unk>"], ["Name"], ["webbrowser"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> display a pdf file that has <unk> <unk> as ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: display a pdf file that has <unk> <unk> as ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` d1 `
Gold: combine two dictionaries ` d ` and ` d1 ` , concatenate string values with identical ` keys `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["dict"], ["elt"], ["generators"], ["Tuple"], ["comprehension"], ["elts"], ["target"], ["iter"], ["ifs"], ["Name"], ["BinOp"], ["Name"], ["Name"], ["k"], ["left"], ["op"], ["right"], ["k"], ["keys"], ["Call"], ["Add"], ["Call"], ["func"], ["args"], ["keywords"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Str"], ["Attribute"], ["Name"], ["Str"], ["value"], ["get"], ["k"], ["<pad>"], ["value"], ["get"], ["k"], ["<pad>"], ["Name"], ["Name"], ["d"], ["d1"], ["<pad>"]]
Seq In: <sos> combine two dictionaries ` d ` and ` d1 ` , concatenate string values with identical ` keys ` <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: combine two dictionaries ` d ` and ` d1 ` , concatenate string values with identical ` keys ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` str `
Gold: trimming a string ` str `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["strip"], ["Name"], ["str"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> trimming a string ` str ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: trimming a string ` str ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` firstname ` to a string ` firstname `
Gold: flask get posted form data ' firstname '
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["first_name"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["get"], ["firstname"], ["Attribute"], ["value"], ["<unk>"], ["Name"], ["request"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> flask get <unk> form data ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: flask get <unk> form data ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` a ` to a string ` b `
Gold: remove item " b " in list ` a `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["remove"], ["b"], ["Name"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> remove item " b " in list ` a ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: remove item " b " in list ` a ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` [ -] ` to a string ` [ -] `
Gold: get all non-ascii characters in a unicode string ` £100 is worth more than €100 `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["print"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["Str"], ["value"], ["sub"], ["<unk>"], ["<pad>"], ["<unk>"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get all non-ascii characters in a unicode string ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get all non-ascii characters in a unicode string ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` codecs ` to a string ` codecs `
Gold: read file ' myfile ' using encoding ' iso-8859-1 '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["read"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["Str"], ["value"], ["open"], ["myfile"], ["r"], ["iso-8859-1"], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> read file ' <unk> ' using encoding ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: read file ' <unk> ' using encoding ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` args `
Gold: abort the execution of a python script
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["exit"], ["Name"], ["sys"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> abort the <unk> of a python script <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: abort the <unk> of a python script <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` echo Hello World ` to a string ` echo Hello World `
Gold: calling an external command " echo Hello World "
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["print"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["read"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["<unk>"], ["echo[SEP]Hello[SEP]World"], ["Name"], ["os"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> calling an external command " echo[SEP]Hello[SEP]World " <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: calling an external command " echo[SEP]Hello[SEP]World " <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` myListOfTuples `
Gold: create a dictionary of pairs from a list of tuples ` myListOfTuples `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["dict"], ["elt"], ["generators"], ["Subscript"], ["comprehension"], ["value"], ["slice"], ["target"], ["iter"], ["ifs"], ["Name"], ["Slice"], ["Name"], ["Call"], ["x"], ["lower"], ["upper"], ["step"], ["x"], ["func"], ["args"], ["keywords"], ["Num"], ["Name"], ["Name"], ["1"], ["reversed"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create a dictionary of pairs from a list of tuples ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create a dictionary of pairs from a list of tuples ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` var1 ` in a list ` var1 `
Gold: execute a sql statement using variables ` var1 ` , ` var2 ` and ` var3 `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Tuple"], ["value"], ["execute"], ["<unk>"], ["elts"], ["Name"], ["Name"], ["Name"], ["Name"], ["cursor"], ["var1"], ["var2"], ["var3"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> execute a sql statement using variables ` var1 ` , ` var2 ` and ` <unk> ` <pad> <pad> <pad> <pad>
Seq Out: execute a sql statement using variables ` var1 ` , ` var2 ` and ` <unk> ` <eos> <pad> <pad> <pad> <pad>

Predict: get a string ` hello ` to a string ` hello `
Gold: delete an element " hello " from a dictionary ` lol `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["pop"], ["hello"], ["Name"], ["lol"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> delete an element " hello " from a dictionary ` lol ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: delete an element " hello " from a dictionary ` lol ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` l ` to a string ` l `
Gold: check if all the items in a list ` ['a', 'b'] ` exists in another list ` l `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["value"], ["issubset"], ["func"], ["args"], ["keywords"], ["Call"], ["Name"], ["Name"], ["func"], ["args"], ["keywords"], ["set"], ["l"], ["Name"], ["List"], ["set"], ["elts"], ["Str"], ["Str"], ["a"], ["b"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> check if all the items in a list ` ['a', 'b'] ` exists in another list ` l ` <pad> <pad>
Seq Out: check if all the items in a list ` ['a', 'b'] ` exists in another list ` l ` <eos> <pad> <pad>

Predict: get a list ` DEBUSSY ` to a list ` DEBUSSY `
Gold: set environment variable ' DEBUSSY ' to ' 1 '
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Subscript"], ["Str"], ["value"], ["slice"], ["1"], ["Attribute"], ["Index"], ["value"], ["environ"], ["value"], ["Name"], ["Str"], ["os"], ["DEBUSSY"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> set environment variable ' DEBUSSY ' to ' 1 ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: set environment variable ' DEBUSSY ' to ' 1 ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df ` to a list ` df `
Gold: get data of columns with null values in dataframe ` df `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Subscript"], ["value"], ["slice"], ["Name"], ["Index"], ["df"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["any"], ["axis"], ["value"], ["Call"], ["Num"], ["func"], ["args"], ["keywords"], ["1"], ["Attribute"], ["Name"], ["value"], ["isnull"], ["df"], ["Name"], ["pd"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get data of columns with null values in dataframe ` df ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get data of columns with null values in dataframe ` df ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` user ` to a string ` user `
Gold: in django , check if a user is in a group ' Member '
Tree: [["Module"], ["body"], ["Return"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["exists"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["filter"], ["name"], ["value"], ["Attribute"], ["Str"], ["value"], ["groups"], ["<unk>"], ["Name"], ["user"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> in django , check if a user is in a group ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: in django , check if a user is in a group ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` array ` to a string ` A `
Gold: find consecutive segments from a column ' A ' in a pandas data frame ' df '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Attribute"], ["value"], ["apply"], ["value"], ["array"], ["Subscript"], ["Name"], ["value"], ["slice"], ["np"], ["Call"], ["Index"], ["func"], ["args"], ["keywords"], ["value"], ["Attribute"], ["Str"], ["Str"], ["value"], ["groupby"], ["A"], ["index"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["reset_index"], ["Name"], ["df"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> find consecutive <unk> from a column ' A ' in a pandas data frame ' df ' <pad> <pad> <pad> <pad>
Seq Out: find consecutive <unk> from a column ' A ' in a pandas data frame ' df ' <eos> <pad> <pad> <pad> <pad>

Predict: get a string ` L ` to a string ` L `
Gold: check if dictionary ` L[0].f.items() ` is in dictionary ` a3.f.items() `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["value"], ["issubset"], ["func"], ["args"], ["keywords"], ["Call"], ["Name"], ["Call"], ["func"], ["args"], ["keywords"], ["set"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["Attribute"], ["set"], ["func"], ["args"], ["keywords"], ["value"], ["items"], ["Attribute"], ["Attribute"], ["value"], ["items"], ["value"], ["f"], ["Attribute"], ["Name"], ["value"], ["f"], ["<unk>"], ["Subscript"], ["value"], ["slice"], ["Name"], ["Index"], ["L"], ["value"], ["Num"], ["0"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> check if dictionary ` <unk> ` is in dictionary ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: check if dictionary ` <unk> ` is in dictionary ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` \d+\.\d+ ` to a string ` \d+\.\d+ `
Gold: extract floating number from string ' Current Level: 13.4 db. '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["findall"], ["<unk>"], ["<unk>"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> extract floating number from string ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: extract floating number from string ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` a `
Gold: sum the product of each two items at the same index of list ` a ` and list ` b `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["sum"], ["elt"], ["generators"], ["BinOp"], ["comprehension"], ["left"], ["op"], ["right"], ["target"], ["iter"], ["ifs"], ["Name"], ["Mult"], ["Name"], ["Tuple"], ["Call"], ["i"], ["j"], ["elts"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["Name"], ["Name"], ["i"], ["j"], ["zip"], ["a"], ["b"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sum the product of each two items at the same index of list ` a ` and list ` b `
Seq Out: sum the product of each two items at the same index of list ` a ` and list ` b ` <eos>

Predict: get a list of a list of a list ` a `
Gold: create array ` a ` containing integers from stdin
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["ListComp"], ["value"], ["<unk>"], ["elt"], ["generators"], ["Name"], ["Call"], ["comprehension"], ["a"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Name"], ["Call"], ["int"], ["val"], ["val"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["split"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["read"], ["Name"], ["stdin"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create array ` a ` containing integers from stdin <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create array ` a ` containing integers from stdin <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` result `
Gold: read a file from redirected stdin and save to variable ` result `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["result"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["read"], ["Attribute"], ["value"], ["stdin"], ["Name"], ["sys"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> read a file from <unk> stdin and save to variable ` result ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: read a file from <unk> stdin and save to variable ` result ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` # Data for Class A[LINE] ` to a string ` f `
Gold: write a comment ` # Data for Class A[LINE] ` to a file object ` f `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["write"], ["<unk>"], ["Name"], ["f"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> write a <unk> ` <unk> ` to a file object ` f ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: write a <unk> ` <unk> ` to a file object ` f ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` dir `
Gold: get a list of variables from module ' adfix.py ' in current module .
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["ListComp"], ["print"], ["elt"], ["generators"], ["Name"], ["comprehension"], ["item"], ["target"], ["iter"], ["ifs"], ["Name"], ["Call"], ["UnaryOp"], ["item"], ["func"], ["args"], ["keywords"], ["op"], ["operand"], ["Name"], ["Name"], ["Not"], ["Call"], ["dir"], ["<unk>"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["startswith"], ["<unk>"], ["Name"], ["item"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get a list of variables from module ' <unk> ' in current module . <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get a list of variables from module ' <unk> ' in current module . <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` RuntimeError ` to a string ` RuntimeError `
Gold: throw a runtime error with specific message ' specific message '
Tree: [["Module"], ["body"], ["Raise"], ["exc"], ["cause"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["<unk>"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> throw a <unk> error with <unk> ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: throw a <unk> error with <unk> ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` start "$file" ` to a string ` start "$file" `
Gold: open a file " $file " under unix
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["system"], ["<unk>"], ["Name"], ["os"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> open a file " <unk> " <unk> <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: open a file " <unk> " <unk> <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` soup ` to a string ` soup `
Gold: find all anchors with a hyperlink that matches the pattern ' ^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//)) '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["keyword"], ["value"], ["find_all"], ["a"], ["href"], ["value"], ["Name"], ["Call"], ["soup"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["compile"], ["<unk>"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> find all <unk> with a <unk> that matches the pattern ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: find all <unk> with a <unk> that matches the pattern ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` text ` to a list ` text `
Gold: hide output of subprocess ` ['espeak', text] `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["List"], ["keyword"], ["value"], ["check_output"], ["elts"], ["stderr"], ["value"], ["Name"], ["Str"], ["Name"], ["Attribute"], ["subprocess"], ["<unk>"], ["text"], ["value"], ["STDOUT"], ["Name"], ["subprocess"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> output of subprocess ` <unk> <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> output of subprocess ` <unk> <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` date ` in a string ` date `
Gold: get equivalent week number from a date ` 2010/6/16 ` using isocalendar
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Subscript"], ["value"], ["slice"], ["Call"], ["Index"], ["func"], ["args"], ["keywords"], ["value"], ["Attribute"], ["Num"], ["value"], ["<unk>"], ["1"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Num"], ["Num"], ["Num"], ["value"], ["date"], ["2010"], ["6"], ["16"], ["Name"], ["datetime"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get <unk> week number from a date ` <unk> ` using <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get <unk> week number from a date ` <unk> ` using <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` order ` in a list ` df `
Gold: binarize the values in columns of list ` order ` in a pandas data frame
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Subscript"], ["value"], ["slice"], ["Call"], ["Index"], ["func"], ["args"], ["keywords"], ["value"], ["Attribute"], ["List"], ["keyword"], ["Name"], ["value"], ["concat"], ["elts"], ["axis"], ["value"], ["order"], ["Name"], ["Name"], ["Call"], ["Num"], ["pd"], ["df"], ["func"], ["args"], ["keywords"], ["1"], ["Attribute"], ["Name"], ["value"], ["astype"], ["int"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Str"], ["Str"], ["value"], ["<unk>"], ["df"], ["<pad>"], ["<pad>"], ["Name"], ["pd"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> the values in columns of list ` order ` in a pandas data frame <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> the values in columns of list ` order ` in a pandas data frame <eos> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` test.csv ` to a string ` test.csv `
Gold: write column ' sum ' of dataframe ` a ` to csv file ' test.csv '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["keyword"], ["value"], ["to_csv"], ["test.csv"], ["cols"], ["value"], ["Name"], ["List"], ["a"], ["elts"], ["Str"], ["sum"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> write column ' sum ' of dataframe ` a ` to csv file ' <unk> ' <pad> <pad> <pad> <pad> <pad>
Seq Out: write column ' sum ' of dataframe ` a ` to csv file ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` commit `
Gold: commit all the changes after executing a query .
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["<unk>"], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> all the <unk> after <unk> a query . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> all the <unk> after <unk> a query . <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` 6 `
Gold: convert list of tuples to multiple lists in python
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Starred"], ["zip"], ["value"], ["List"], ["elts"], ["Tuple"], ["Tuple"], ["Tuple"], ["elts"], ["elts"], ["elts"], ["Num"], ["Num"], ["Num"], ["Num"], ["Num"], ["Num"], ["1"], ["2"], ["3"], ["4"], ["5"], ["6"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert list of tuples to multiple lists in python <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert list of tuples to multiple lists in python <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` B ` in a string ` B `
Gold: find the euclidean distance between two 3-d arrays ` A ` and ` B `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["value"], ["<unk>"], ["func"], ["args"], ["keywords"], ["Name"], ["Attribute"], ["UnaryOp"], ["np"], ["value"], ["sum"], ["op"], ["operand"], ["BinOp"], ["USub"], ["Num"], ["left"], ["op"], ["right"], ["1"], ["BinOp"], ["Pow"], ["Num"], ["left"], ["op"], ["right"], ["2"], ["Name"], ["Sub"], ["Name"], ["A"], ["B"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> find the <unk> <unk> between two <unk> arrays ` A ` and ` B ` <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: find the <unk> <unk> between two <unk> arrays ` A ` and ` B ` <eos> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` stats ` in a list ` stats `
Gold: pandas split strings in column ' stats ' by ' , ' into columns in dataframe ` df `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["value"], ["astype"], ["float"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["keyword"], ["value"], ["split"], [","], ["<unk>"], ["value"], ["Attribute"], ["NameConstant"], ["value"], ["str"], ["True"], ["Subscript"], ["value"], ["slice"], ["Attribute"], ["Slice"], ["value"], ["str"], ["lower"], ["upper"], ["step"], ["Subscript"], ["Num"], ["UnaryOp"], ["value"], ["slice"], ["1"], ["op"], ["operand"], ["Name"], ["Index"], ["USub"], ["Num"], ["df"], ["value"], ["1"], ["Str"], ["stats"], ["<pad>"]]
Seq In: <sos> pandas split strings in column ' stats ' by ' , ' into columns in dataframe ` df ` <pad> <pad>
Seq Out: pandas split strings in column ' stats ' by ' , ' into columns in dataframe ` df ` <eos> <pad> <pad>

Predict: get a string ` strs ` to a string ` strs `
Gold: find all occurrences of the pattern ' \[[^\]]*\]|\([^\)]*\)|"[^"]*"|\S+ ' within ` strs `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Name"], ["value"], ["findall"], ["<unk>"], ["strs"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> find all occurrences of the pattern ' <unk> ' within ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: find all occurrences of the pattern ' <unk> ' within ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` lst `
Gold: check if all elements in list ` lst ` are tupples of long and int
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["all"], ["elt"], ["generators"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Name"], ["Name"], ["Name"], ["isinstance"], ["x"], ["int"], ["x"], ["lst"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> check if all elements in list ` lst ` are <unk> of long and int <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: check if all elements in list ` lst ` are <unk> of long and int <eos> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` 0 `
Gold: properly quit a program
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Num"], ["value"], ["exit"], ["0"], ["Name"], ["sys"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> properly <unk> a program <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: properly <unk> a program <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` strings `
Gold: sum the length of all strings in a list ` strings `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["length"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["sum"], ["elt"], ["generators"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Name"], ["Name"], ["len"], ["s"], ["s"], ["strings"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sum the length of all strings in a list ` strings ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sum the length of all strings in a list ` strings ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` 20M10000N80M ` to a string ` 20M10000N80M `
Gold: separate numbers and characters in string ' 20M10000N80M '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["findall"], ["<unk>"], ["20M10000N80M"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> separate numbers and characters in string ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: separate numbers and characters in string ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: sort a list ` l ` with a list ` l `
Gold: sort a list of lists ` l ` by index 2 of the inner list
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["sort"], ["key"], ["value"], ["Name"], ["Lambda"], ["l"], ["args"], ["body"], ["arguments"], ["Subscript"], ["args"], ["vararg"], ["kwonlyargs"], ["kw_defaults"], ["kwarg"], ["defaults"], ["value"], ["slice"], ["arg"], ["Name"], ["Index"], ["x"], ["annotation"], ["x"], ["value"], ["Num"], ["2"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort a list of lists ` l ` by index 2 of the <unk> list <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sort a list of lists ` l ` by index 2 of the <unk> list <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df ` to a list ` df `
Gold: apply two different aggregating functions ` mean ` and ` sum ` to the same column ` dummy ` in pandas data frame ` df `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Dict"], ["value"], ["agg"], ["keys"], ["values"], ["Call"], ["Str"], ["List"], ["func"], ["args"], ["keywords"], ["returns"], ["elts"], ["Attribute"], ["Str"], ["Attribute"], ["Attribute"], ["value"], ["groupby"], ["<unk>"], ["value"], ["mean"], ["value"], ["sum"], ["Name"], ["Name"], ["Name"], ["df"], ["np"], ["np"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> apply two different <unk> functions ` mean ` and ` sum ` to the same column ` <unk> ` in pandas data frame ` df `
Seq Out: apply two different <unk> functions ` mean ` and ` sum ` to the same column ` <unk> ` in pandas data frame ` df ` <eos>

Predict: get a list of a list of a list ` a `
Gold: find average of a nested list ` a `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["ListComp"], ["a"], ["elt"], ["generators"], ["BinOp"], ["comprehension"], ["left"], ["op"], ["right"], ["target"], ["iter"], ["ifs"], ["Call"], ["Div"], ["Call"], ["Name"], ["Call"], ["func"], ["args"], ["keywords"], ["func"], ["args"], ["keywords"], ["x"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["Name"], ["Name"], ["Starred"], ["sum"], ["x"], ["len"], ["x"], ["zip"], ["value"], ["Name"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> find average of a nested list ` a ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: find average of a nested list ` a ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df_1 ` to a list ` df_1 `
Gold: concatenate dataframe ` df_1 ` to dataframe ` df_2 ` sorted by values of the column ' y '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["List"], ["value"], ["concat"], ["elts"], ["Name"], ["Name"], ["Call"], ["pd"], ["<unk>"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["sort_values"], ["y"], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> concatenate dataframe ` <unk> ` to dataframe ` <unk> ` sorted by values of the column ' y ' <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: concatenate dataframe ` <unk> ` to dataframe ` <unk> ` sorted by values of the column ' y ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` filename ` to a string ` filename `
Gold: remove parentheses and text within it in string ` filename `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["Name"], ["value"], ["sub"], ["<unk>"], ["<pad>"], ["filename"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> remove parentheses and text within it in string ` filename ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: remove parentheses and text within it in string ` filename ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: sort a list ` unsorted_list ` with a list ` unsorted_list `
Gold: sort lists in the list ` unsorted_list ` by the element at index 3 of each list
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["sort"], ["key"], ["value"], ["Name"], ["Lambda"], ["unsorted_list"], ["args"], ["body"], ["arguments"], ["Subscript"], ["args"], ["vararg"], ["kwonlyargs"], ["kw_defaults"], ["kwarg"], ["defaults"], ["value"], ["slice"], ["arg"], ["Name"], ["Index"], ["x"], ["annotation"], ["x"], ["value"], ["Num"], ["3"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort lists in the list ` <unk> ` by the element at index 3 of each list <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sort lists in the list ` <unk> ` by the element at index 3 of each list <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` s `
Gold: remove all non-alphabet chars from string ` s `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["ListComp"], ["value"], ["join"], ["elt"], ["generators"], ["Str"], ["Name"], ["comprehension"], ["<pad>"], ["i"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Call"], ["i"], ["s"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["<unk>"], ["Name"], ["i"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> remove all <unk> <unk> from string ` s ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: remove all <unk> <unk> from string ` s ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` 2 ` in a list ` 2 `
Gold: convert a list with string ` ['1', '2', '3'] ` into list with integers
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["List"], ["map"], ["int"], ["elts"], ["Str"], ["Str"], ["Str"], ["1"], ["2"], ["3"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert a list with string ` <unk> <unk> <unk> ` into list with integers <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert a list with string ` <unk> <unk> <unk> ` into list with integers <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` string ` to a string ` string `
Gold: regular expression matching all but ' aa ' and ' bb ' for string ` string `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Name"], ["value"], ["findall"], ["<unk>"], ["string"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> regular expression matching all but ' <unk> ' and ' <unk> ' for string ` string ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: regular expression matching all but ' <unk> ' and ' <unk> ' for string ` string ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` title ` to a string ` title `
Gold: django get the value of key ' title ' from post request ` request ` if exists , else return empty string ' '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["get"], ["title"], ["<pad>"], ["Attribute"], ["value"], ["POST"], ["Name"], ["request"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> django get the value of key ' title ' from post request ` request ` if exists , <unk> return empty string ' ' <pad> <pad>
Seq Out: django get the value of key ' title ' from post request ` request ` if exists , <unk> return empty string ' ' <eos> <pad> <pad>

Predict: get a list of a list of a list ` mylist `
Gold: removing key values pairs with key ' mykey1 ' from a list of dictionaries ` mylist `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["ListComp"], ["elt"], ["generators"], ["DictComp"], ["comprehension"], ["key"], ["value"], ["generators"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["comprehension"], ["Name"], ["Name"], ["k"], ["v"], ["target"], ["iter"], ["ifs"], ["d"], ["mylist"], ["Tuple"], ["Call"], ["Compare"], ["elts"], ["func"], ["args"], ["keywords"], ["left"], ["ops"], ["comparators"], ["Name"], ["Name"], ["Attribute"], ["Name"], ["NotEq"], ["Str"], ["k"], ["v"], ["value"], ["items"], ["k"], ["mykey1"], ["Name"], ["d"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> removing key values pairs with key ' <unk> ' from a list of dictionaries ` mylist ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: removing key values pairs with key ' <unk> ' from a list of dictionaries ` mylist ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: sort a list ` xs ` with a list ` xs `
Gold: sort list of strings ` xs ` by the length of string
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["sort"], ["key"], ["value"], ["Name"], ["Lambda"], ["xs"], ["args"], ["body"], ["arguments"], ["Call"], ["args"], ["vararg"], ["kwonlyargs"], ["kw_defaults"], ["kwarg"], ["defaults"], ["func"], ["args"], ["keywords"], ["arg"], ["Name"], ["Name"], ["s"], ["annotation"], ["len"], ["s"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort list of strings ` xs ` by the length of string <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sort list of strings ` xs ` by the length of string <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` a ` to a string ` name `
Gold: delete the element ` c ` from list ` a `
Tree: [["Module"], ["body"], ["Try"], ["body"], ["handlers"], ["orelse"], ["finalbody"], ["Expr"], ["ExceptHandler"], ["value"], ["type"], ["name"], ["body"], ["Call"], ["Name"], ["Pass"], ["func"], ["args"], ["keywords"], ["ValueError"], ["Attribute"], ["Name"], ["value"], ["remove"], ["c"], ["Name"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> delete the element ` c ` from list ` a ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: delete the element ` c ` from list ` a ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` imshow ` to a string ` imshow `
Gold: display a grayscale image from array of pixels ` imageArray `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["keyword"], ["<unk>"], ["<unk>"], ["<unk>"], ["value"], ["Str"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> display a <unk> image from array of <unk> ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: display a <unk> image from array of <unk> ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` itemlist ` in a string ` itemlist `
Gold: serialize ` itemlist ` to file ` outfile `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Name"], ["value"], ["<unk>"], ["itemlist"], ["<unk>"], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> serialize ` <unk> ` to file ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: serialize ` <unk> ` to file ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` column_name ` in a list ` df `
Gold: select rows whose column value in column ` column_name ` does not equal ` some_value ` in pandas data frame
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Subscript"], ["value"], ["slice"], ["Attribute"], ["Index"], ["value"], ["loc"], ["value"], ["Name"], ["Compare"], ["df"], ["left"], ["ops"], ["comparators"], ["Subscript"], ["NotEq"], ["Name"], ["value"], ["slice"], ["some_value"], ["Name"], ["Index"], ["df"], ["value"], ["Str"], ["column_name"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> select rows whose column value in column ` column_name ` does not equal ` <unk> ` in pandas data frame <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: select rows whose column value in column ` column_name ` does not equal ` <unk> ` in pandas data frame <eos> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` my_list `
Gold: remove index 2 element from a list ` my_list `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Num"], ["value"], ["pop"], ["2"], ["Name"], ["my_list"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> remove index 2 element from a list ` my_list ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: remove index 2 element from a list ` my_list ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` test2.py ` to a string ` test2.py `
Gold: run ' test2.py ' file with python location ' path/to/python ' and arguments ' neededArgumetGoHere ' as a subprocess
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["List"], ["call"], ["elts"], ["Str"], ["Str"], ["Str"], ["<unk>"], ["test2.py"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> run ' <unk> ' file with python <unk> ' <unk> ' and arguments ' <unk> ' as a subprocess <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: run ' <unk> ' file with python <unk> ' <unk> ' and arguments ' <unk> ' as a subprocess <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` a `
Gold: sum the products of each two elements at the same index of list ` a ` and list ` b `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["list"], ["elt"], ["generators"], ["BinOp"], ["comprehension"], ["left"], ["op"], ["right"], ["target"], ["iter"], ["ifs"], ["Name"], ["Mult"], ["Name"], ["Tuple"], ["Call"], ["x"], ["y"], ["elts"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["Call"], ["x"], ["y"], ["list"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["zip"], ["a"], ["b"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sum the <unk> of each two elements at the same index of list ` a ` and list ` b ` <pad> <pad> <pad> <pad> <pad>
Seq Out: sum the <unk> of each two elements at the same index of list ` a ` and list ` b ` <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` 20<30 ` to a string ` 20<30 `
Gold: evaluate the expression ' 20<30 '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["eval"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> the expression ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> the expression ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` , ` to a list ` , `
Gold: input an integer tuple from user
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["tuple"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Call"], ["map"], ["int"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["split"], [","], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["input"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> input an integer tuple from user <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: input an integer tuple from user <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` 21 `
Gold: convert 21 to binary string
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Num"], ["bin"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert <unk> to binary string <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert <unk> to binary string <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` path ` to a string ` path `
Gold: find name of current directory
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["<unk>"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["value"], ["dirname"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Attribute"], ["Name"], ["value"], ["path"], ["value"], ["realpath"], ["__file__"], ["Name"], ["Attribute"], ["os"], ["value"], ["path"], ["Name"], ["os"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> find name of current directory <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: find name of current directory <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` MyStringHere ` in a list ` MyStringHere `
Gold: start a new thread for ` myfunction ` with parameters ' MyStringHere ' and 1
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Tuple"], ["value"], ["<unk>"], ["myfunction"], ["elts"], ["Name"], ["Str"], ["Num"], ["<unk>"], ["MyStringHere"], ["1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> start a new <unk> for ` myfunction ` with parameters ' <unk> ' and 1 <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: start a new <unk> for ` myfunction ` with parameters ' <unk> ' and 1 <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df ` to a list ` df `
Gold: combine two columns ` foo ` and ` bar ` in a pandas data frame
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["value"], ["<unk>"], ["df"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["List"], ["value"], ["concat"], ["elts"], ["Name"], ["Call"], ["Call"], ["pandas"], ["func"], ["args"], ["keywords"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Attribute"], ["value"], ["dropna"], ["value"], ["dropna"], ["Subscript"], ["Subscript"], ["value"], ["slice"], ["value"], ["slice"], ["Name"], ["Index"], ["Name"], ["Index"], ["df"], ["value"], ["df"], ["value"], ["Str"], ["Str"], ["foo"], ["bar"], ["<pad>"]]
Seq In: <sos> combine two columns ` foo ` and ` bar ` in a pandas data frame <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: combine two columns ` foo ` and ` bar ` in a pandas data frame <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list ` date ` to a string ` date `
Gold: get last day of the first month in year 2000
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["BinOp"], ["left"], ["op"], ["right"], ["Call"], ["Sub"], ["Call"], ["func"], ["args"], ["keywords"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Num"], ["Num"], ["Num"], ["Attribute"], ["keyword"], ["value"], ["date"], ["<unk>"], ["2"], ["1"], ["value"], ["timedelta"], ["days"], ["value"], ["Name"], ["Name"], ["Num"], ["datetime"], ["datetime"], ["1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get last day of the first month in year <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get last day of the first month in year <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` myfile.txt ` to a string ` myfile.txt `
Gold: read file ' myfile.txt ' using universal newline mode ' U '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["print"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["read"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["Str"], ["open"], ["myfile.txt"], ["U"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> read file ' <unk> ' using <unk> newline mode ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: read file ' <unk> ' using <unk> newline mode ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list ` obj ` to a string ` obj `
Gold: get all object attributes of object ` obj `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Attribute"], ["print"], ["value"], ["__dict__"], ["Name"], ["obj"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get all object attributes of object ` obj ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get all object attributes of object ` obj ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` /s ` to a string ` /s `
Gold: shutdown a computer using subprocess
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["List"], ["value"], ["call"], ["elts"], ["Name"], ["Str"], ["Str"], ["subprocess"], ["shutdown"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> shutdown a computer using subprocess <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: shutdown a computer using subprocess <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` sorted_list_of_keyvalues ` in a list ` sorted_list_of_keyvalues `
Gold: sort json ` ips_data ` by a key ' data_two '
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["<unk>"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["keyword"], ["sorted"], ["func"], ["args"], ["keywords"], ["key"], ["value"], ["Name"], ["Call"], ["Subscript"], ["list"], ["func"], ["args"], ["keywords"], ["value"], ["slice"], ["Attribute"], ["Subscript"], ["Index"], ["value"], ["items"], ["value"], ["slice"], ["value"], ["Name"], ["Name"], ["Index"], ["Str"], ["<unk>"], ["item"], ["value"], ["<unk>"], ["Num"], ["1"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort json ` <unk> ` by a key ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sort json ` <unk> ` by a key ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` s `
Gold: how to get the length of words in a sentence ?
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["ListComp"], ["elt"], ["generators"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Name"], ["Call"], ["len"], ["x"], ["x"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["split"], ["Name"], ["s"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> how to get the length of words in a sentence ? <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: how to get the length of words in a sentence ? <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` time ` to a string ` %Y-%m-%d %H:%M `
Gold: print current date and time in a regular format
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["strftime"], ["<unk>"], ["Name"], ["time"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> print current date and time in a regular format <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: print current date and time in a regular format <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` executemany ` to a string ` executemany `
Gold: execute sql query ' INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s) ' with all parameters in list ` tup `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Name"], ["value"], ["<unk>"], ["<unk>"], ["tup"], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> execute sql query ' <unk> ' with all parameters in list ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: execute sql query ' <unk> ' with all parameters in list ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` lst ` to a string ` lst `
Gold: concat a list of strings ` lst ` using string formatting
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["value"], ["join"], ["lst"], ["Str"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> a list of strings ` lst ` using string formatting <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> a list of strings ` lst ` using string formatting <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` s ` to a string ` s `
Gold: remove extra white spaces & tabs from a string ` s `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["value"], ["join"], ["func"], ["args"], ["keywords"], ["Str"], ["Attribute"], ["<pad>"], ["value"], ["split"], ["Name"], ["s"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> remove <unk> white spaces & tabs from a string ` s ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: remove <unk> white spaces & tabs from a string ` s ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` lst ` in a list ` lst `
Gold: get all combination of n binary values
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["lst"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["list"], ["func"], ["args"], ["keywords"], ["Attribute"], ["List"], ["keyword"], ["value"], ["product"], ["elts"], ["repeat"], ["value"], ["Name"], ["Num"], ["Num"], ["Name"], ["itertools"], ["0"], ["1"], ["n"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get all combination of n binary values <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get all combination of n binary values <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df ` to a list ` df `
Gold: add multiple columns ` hour ` , ` weekday ` , ` weeknum ` to pandas data frame ` df ` from lambda function ` lambdafunc `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Subscript"], ["Call"], ["value"], ["slice"], ["func"], ["args"], ["keywords"], ["Name"], ["Index"], ["Attribute"], ["Name"], ["keyword"], ["df"], ["value"], ["value"], ["apply"], ["<unk>"], ["axis"], ["value"], ["List"], ["Name"], ["Num"], ["elts"], ["df"], ["1"], ["Str"], ["Str"], ["Str"], ["<unk>"], ["<unk>"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> add multiple columns ` hour ` , ` <unk> ` , ` <unk> ` to pandas data frame ` df ` from lambda function ` <unk> `
Seq Out: add multiple columns ` hour ` , ` <unk> ` , ` <unk> ` to pandas data frame ` df ` from lambda function ` <unk> ` <eos>

Predict: get a string ` utf-8 ` to a string ` XÃ¼YÃ `
Gold: encode ` u'XÃ¼YÃ' ` as unicode and decode with utf-8
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["decode"], ["utf-8"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["encode"], ["raw_unicode_escape"], ["Str"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> encode ` <unk> ` as unicode and decode with utf-8 <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: encode ` <unk> ` as unicode and decode with utf-8 <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` a ` to a string ` a `
Gold: remove the element in list ` a ` at index ` index `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["value"], ["pop"], ["index"], ["Name"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> remove the element in list ` a ` at index ` index ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: remove the element in list ` a ` at index ` index ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` sorted_list ` in a list ` sorted_list `
Gold: sort a list of lists ` list_to_sort ` by indices 2,0,1 of the inner list
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["<unk>"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["keyword"], ["sorted"], ["<unk>"], ["key"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Num"], ["Num"], ["Num"], ["itemgetter"], ["2"], ["0"], ["1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort a list of lists ` <unk> ` by indices <unk> of the <unk> list <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sort a list of lists ` <unk> ` by indices <unk> of the <unk> list <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` df ` to a string ` df `
Gold: replace nan values in column ' value ' with the mean of data in column ' group ' of dataframe ` df `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["value"], ["fillna"], ["func"], ["args"], ["keywords"], ["Subscript"], ["Attribute"], ["Str"], ["value"], ["slice"], ["value"], ["transform"], ["mean"], ["Name"], ["Index"], ["Call"], ["df"], ["value"], ["func"], ["args"], ["keywords"], ["List"], ["Attribute"], ["Str"], ["elts"], ["value"], ["groupby"], ["group"], ["Str"], ["Name"], ["value"], ["df"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> replace nan values in column ' value ' with the mean of data in column ' group ' of dataframe ` df ` <pad> <pad> <pad> <pad>
Seq Out: replace nan values in column ' value ' with the mean of data in column ' group ' of dataframe ` df ` <eos> <pad> <pad> <pad> <pad>

Predict: get a string ` ls ` to a string ` ls `
Gold: calling an external command " ls -l "
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["List"], ["call"], ["elts"], ["Str"], ["Str"], ["ls"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> calling an external command " ls <unk> " <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: calling an external command " ls <unk> " <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` s ` in a list ` s `
Gold: convert a string ` s ` to its base-10 representation
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["Num"], ["int"], ["func"], ["args"], ["keywords"], ["16"], ["Attribute"], ["Str"], ["value"], ["encode"], ["hex"], ["Name"], ["s"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert a string ` s ` to its <unk> representation <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert a string ` s ` to its <unk> representation <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` year ` in a list ` month `
Gold: get last day of the month ` month ` in year ` year `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Subscript"], ["value"], ["slice"], ["Call"], ["Index"], ["func"], ["args"], ["keywords"], ["value"], ["Attribute"], ["Name"], ["Name"], ["Num"], ["value"], ["monthrange"], ["year"], ["month"], ["1"], ["Name"], ["calendar"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get last day of the month ` month ` in year ` year ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get last day of the month ` month ` in year ` year ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` %Y-%m-%d ` to a string ` %Y-%m-%d `
Gold: get yesterday 's date as a string in ` YYYY-MM-DD ` format using timedelta
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["strftime"], ["%Y-%m-%d"], ["BinOp"], ["left"], ["op"], ["right"], ["Call"], ["Sub"], ["Call"], ["func"], ["args"], ["keywords"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Num"], ["value"], ["now"], ["timedelta"], ["1"], ["Name"], ["datetime"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get <unk> 's date as a string in ` <unk> ` format using <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get <unk> 's date as a string in ` <unk> ` format using <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` a `
Gold: convert a python dictionary ' a ' to a list of tuples
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["ListComp"], ["elt"], ["generators"], ["Tuple"], ["comprehension"], ["elts"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Tuple"], ["Call"], ["k"], ["v"], ["elts"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Attribute"], ["k"], ["v"], ["value"], ["items"], ["Name"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert a python dictionary ' a ' to a list of tuples <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert a python dictionary ' a ' to a list of tuples <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` M ` to a string ` M `
Gold: delete character " M " from a string ` s ` using python
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["s"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["replace"], ["M"], ["<pad>"], ["Name"], ["s"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> delete character " M " from a string ` s ` using python <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: delete character " M " from a string ` s ` using python <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` myVar ` to a string ` myVar `
Gold: check if a local variable ' myVar ' exists
Tree: [["Module"], ["body"], ["If"], ["test"], ["body"], ["orelse"], ["Compare"], ["Pass"], ["left"], ["ops"], ["comparators"], ["Str"], ["In"], ["Call"], ["myVar"], ["func"], ["args"], ["keywords"], ["Name"], ["locals"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> check if a <unk> variable ' myVar ' exists <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: check if a <unk> variable ' myVar ' exists <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` title ` to a string ` title `
Gold: group the values from django model ` Article ` with group by value ` pub_date ` and annotate by ` title `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["<unk>"], ["<unk>"], ["value"], ["Call"], ["Call"], ["func"], ["args"], ["keywords"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Name"], ["Str"], ["value"], ["values"], ["<unk>"], ["<unk>"], ["title"], ["Attribute"], ["value"], ["objects"], ["Name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> group the values from django model ` <unk> ` with group by value ` <unk> ` and <unk> by ` title ` <pad> <pad> <pad> <pad> <pad>
Seq Out: group the values from django model ` <unk> ` with group by value ` <unk> ` and <unk> by ` title ` <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` fooxyzbar ` to a string ` fooxyzbar `
Gold: split string ' fooxyzbar ' based on case-insensitive matching using string ' XYZ '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["split"], ["<unk>"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Attribute"], ["value"], ["compile"], ["<unk>"], ["value"], ["IGNORECASE"], ["Name"], ["Name"], ["re"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> split string ' <unk> ' based on <unk> matching using string ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: split string ' <unk> ' based on <unk> matching using string ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` set_size_inches `
Gold: set the size of figure ` fig ` in inches to width height of ` w ` , ` h `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Name"], ["keyword"], ["value"], ["<unk>"], ["w"], ["h"], ["<unk>"], ["value"], ["Name"], ["NameConstant"], ["fig"], ["True"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> set the size of figure ` <unk> ` in <unk> to width <unk> of ` <unk> ` , ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: set the size of figure ` <unk> ` in <unk> to width <unk> of ` <unk> ` , ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` soup ` to a string ` soup `
Gold: beautifulsoup search string ' Elsie ' inside tag ' a '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["keyword"], ["value"], ["find_all"], ["a"], ["string"], ["value"], ["Name"], ["Str"], ["soup"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> beautifulsoup search string ' <unk> ' inside tag ' a ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: beautifulsoup search string ' <unk> ' inside tag ' a ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df `
Gold: return dataframe ` df ` with last row dropped
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Subscript"], ["value"], ["slice"], ["Attribute"], ["Slice"], ["value"], ["ix"], ["lower"], ["upper"], ["step"], ["Name"], ["UnaryOp"], ["df"], ["op"], ["operand"], ["USub"], ["Num"], ["1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> return dataframe ` df ` with last row <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: return dataframe ` df ` with last row <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` 0,1,2 ` to a string ` 0,1,2 `
Gold: split string " 0,1,2 " based on delimiter ' , '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["split"], [","], ["Str"], ["0,1,2"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> split string " <unk> " based on delimiter ' , ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: split string " <unk> " based on delimiter ' , ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` log ` to ' ax `
Gold: plot logarithmic axes with matplotlib
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["<unk>"], ["log"], ["Name"], ["ax"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> plot <unk> axes with matplotlib <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: plot <unk> axes with matplotlib <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` path `
Gold: list all files in directory ` path `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["value"], ["listdir"], ["path"], ["Name"], ["os"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> list all files in directory ` path ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: list all files in directory ` path ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` 0xff ` to a string ` 0xff `
Gold: convert hex string " 0xff " to decimal
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["Num"], ["int"], ["<unk>"], ["16"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert hex string " <unk> " to decimal <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert hex string " <unk> " to decimal <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` a `
Gold: generate all possible string permutations of each two elements in list ` ['hel', 'lo', 'bye'] `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["ListComp"], ["print"], ["elt"], ["generators"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Attribute"], ["Name"], ["Name"], ["Call"], ["value"], ["join"], ["a"], ["a"], ["func"], ["args"], ["keywords"], ["Str"], ["Name"], ["List"], ["Num"], ["<pad>"], ["combinations"], ["elts"], ["2"], ["Str"], ["Str"], ["Str"], ["<unk>"], ["<unk>"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> generate all possible string permutations of each two elements in list ` <unk> <unk> <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: generate all possible string permutations of each two elements in list ` <unk> <unk> <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` [LINE] ` to a string ` myString `
Gold: trimming " [LINE] " from string ` myString `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["strip"], ["[LINE]"], ["Name"], ["myString"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> trimming " [LINE] " from string ` myString ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: trimming " [LINE] " from string ` myString ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` df ` to a string ` df `
Gold: use regex pattern ' ^12(?=.{4}$) ' to remove digit 12 if followed by 4 other digits in column ` c_contofficeID ` of dataframe ` df `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["replace"], ["<unk>"], ["<pad>"], ["Attribute"], ["value"], ["str"], ["Attribute"], ["value"], ["<unk>"], ["Name"], ["df"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> use regex pattern ' <unk> ' to remove digit 12 if followed by 4 other digits in column ` <unk> ` of dataframe ` df ` <pad>
Seq Out: use regex pattern ' <unk> ' to remove digit 12 if followed by 4 other digits in column ` <unk> ` of dataframe ` df ` <eos> <pad>

Predict: get a list of a list ` a ` to a list ` a `
Gold: solve for the least squares ' solution of matrices ` a ` and ` b `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["Call"], ["value"], ["<unk>"], ["func"], ["args"], ["keywords"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Attribute"], ["Attribute"], ["Name"], ["Attribute"], ["Attribute"], ["Name"], ["value"], ["<unk>"], ["value"], ["dot"], ["value"], ["T"], ["a"], ["value"], ["dot"], ["value"], ["T"], ["b"], ["Name"], ["Name"], ["Name"], ["Name"], ["Name"], ["np"], ["np"], ["a"], ["np"], ["a"], ["<pad>"]]
Seq In: <sos> <unk> for the <unk> squares ' <unk> of <unk> ` a ` and ` b ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> for the <unk> squares ' <unk> of <unk> ` a ` and ` b ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` test.txt ` to a string ` test.txt `
Gold: save numpy array ` x ` into text file ' test.txt '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Name"], ["value"], ["<unk>"], ["test.txt"], ["x"], ["Name"], ["np"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> save numpy array ` x ` into text file ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: save numpy array ` x ` into text file ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: sort a list ` a ` to list ` a `
Gold: sort a data ` a ` in descending order based on the ` modified ` attribute of elements using lambda function
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["a"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["keyword"], ["keyword"], ["sorted"], ["a"], ["key"], ["value"], ["reverse"], ["value"], ["Lambda"], ["NameConstant"], ["args"], ["body"], ["True"], ["arguments"], ["Attribute"], ["args"], ["vararg"], ["kwonlyargs"], ["kw_defaults"], ["kwarg"], ["defaults"], ["value"], ["<unk>"], ["arg"], ["Name"], ["x"], ["annotation"], ["x"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort a data ` a ` in descending order based on the ` modified ` attribute of elements using lambda function <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sort a data ` a ` in descending order based on the ` modified ` attribute of elements using lambda function <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` ratio ` in a list ` ratio `
Gold: get proportion of rows in dataframe ` trace_df ` whose values for column ` ratio ` are greater than 0
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["mean"], ["Compare"], ["left"], ["ops"], ["comparators"], ["Subscript"], ["Gt"], ["Num"], ["value"], ["slice"], ["0"], ["Name"], ["Index"], ["<unk>"], ["value"], ["Str"], ["ratio"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get <unk> of rows in dataframe ` <unk> ` whose values for column ` ratio ` are greater than 0 <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get <unk> of rows in dataframe ` <unk> ` whose values for column ` ratio ` are greater than 0 <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` line `
Gold: read lines from a csv file ` ./urls-eu.csv ` into a list of lists ` arr `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["ListComp"], ["arr"], ["elt"], ["generators"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Attribute"], ["Str"], ["Name"], ["Call"], ["value"], ["split"], [","], ["line"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Str"], ["line"], ["open"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> read lines from a csv file ` <unk> ` into a list of lists ` arr ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: read lines from a csv file ` <unk> ` into a list of lists ` arr ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` mypath `
Gold: list all files of a directory ` mypath `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["ListComp"], ["<unk>"], ["elt"], ["generators"], ["Name"], ["comprehension"], ["f"], ["target"], ["iter"], ["ifs"], ["Name"], ["Call"], ["Call"], ["f"], ["func"], ["args"], ["keywords"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["Call"], ["listdir"], ["mypath"], ["isfile"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["join"], ["mypath"], ["f"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> list all files of a directory ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: list all files of a directory ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` url ` in a list ` url `
Gold: serve a static html page ' your_template.html ' at the root of a django project
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["Call"], ["url"], ["<unk>"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["<unk>"], ["<unk>"], ["value"], ["Name"], ["Str"], ["<unk>"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> a <unk> html page ' <unk> ' at the root of a django <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> a <unk> html page ' <unk> ' at the root of a django <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` Male `
Gold: replace value 0 with ' Female ' and value 1 with ' Male ' in column ' sex ' of dataframe ` data `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["List"], ["List"], ["keyword"], ["value"], ["replace"], ["elts"], ["elts"], ["inplace"], ["value"], ["Subscript"], ["Num"], ["Num"], ["Str"], ["Str"], ["NameConstant"], ["value"], ["slice"], ["0"], ["1"], ["<unk>"], ["Male"], ["True"], ["Name"], ["Index"], ["data"], ["value"], ["Str"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> replace value 0 with ' <unk> ' and value 1 with ' <unk> ' in column ' <unk> ' of dataframe ` data ` <pad> <pad> <pad> <pad>
Seq Out: replace value 0 with ' <unk> ' and value 1 with ' <unk> ' in column ' <unk> ' of dataframe ` data ` <eos> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` 7 `
Gold: find the sums of length 7 subsets of a list ` daily `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["ListComp"], ["<unk>"], ["elt"], ["generators"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Subscript"], ["Name"], ["Call"], ["sum"], ["value"], ["slice"], ["x"], ["func"], ["args"], ["keywords"], ["Name"], ["Slice"], ["Name"], ["Num"], ["Call"], ["Num"], ["<unk>"], ["lower"], ["upper"], ["step"], ["range"], ["0"], ["func"], ["args"], ["keywords"], ["7"], ["Name"], ["BinOp"], ["Name"], ["Name"], ["x"], ["left"], ["op"], ["right"], ["len"], ["<unk>"], ["Name"], ["Add"], ["Num"], ["x"], ["7"], ["<pad>"]]
Seq In: <sos> find the sums of length 7 <unk> of a list ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: find the sums of length 7 <unk> of a list ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of list ` a ` to list ` a `
Gold: sort list ` a ` in ascending order based on the addition of the second and third elements of each tuple in it
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["keyword"], ["sorted"], ["a"], ["key"], ["value"], ["Lambda"], ["args"], ["body"], ["arguments"], ["Tuple"], ["args"], ["vararg"], ["kwonlyargs"], ["kw_defaults"], ["kwarg"], ["defaults"], ["elts"], ["arg"], ["Call"], ["Subscript"], ["x"], ["annotation"], ["func"], ["args"], ["keywords"], ["value"], ["slice"], ["Name"], ["Subscript"], ["Name"], ["Index"], ["sum"], ["value"], ["slice"], ["x"], ["value"], ["Name"], ["Slice"], ["Num"], ["x"], ["lower"], ["upper"], ["step"], ["0"], ["Num"], ["Num"], ["1"], ["3"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort list ` a ` in ascending order based on the <unk> of the second and third elements of each tuple in it <pad> <pad> <pad> <pad> <pad>
Seq Out: sort list ` a ` in ascending order based on the <unk> of the second and third elements of each tuple in it <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` d `
Gold: concatenate elements of a list ' x ' of multiple integers to a single integer
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["sum"], ["elt"], ["generators"], ["BinOp"], ["comprehension"], ["left"], ["op"], ["right"], ["target"], ["iter"], ["ifs"], ["Name"], ["Mult"], ["BinOp"], ["Tuple"], ["Call"], ["d"], ["left"], ["op"], ["right"], ["elts"], ["func"], ["args"], ["keywords"], ["Num"], ["Pow"], ["Name"], ["Name"], ["Name"], ["Name"], ["Subscript"], ["10"], ["i"], ["i"], ["d"], ["enumerate"], ["value"], ["slice"], ["Name"], ["Slice"], ["x"], ["lower"], ["upper"], ["step"], ["UnaryOp"], ["op"], ["operand"], ["USub"], ["Num"], ["1"], ["<pad>"]]
Seq In: <sos> concatenate elements of a list ' x ' of multiple integers to a single integer <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: concatenate elements of a list ' x ' of multiple integers to a single integer <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` item `
Gold: check if the third element of all the lists in a list " items " is equal to zero .
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["any"], ["elt"], ["generators"], ["Compare"], ["comprehension"], ["left"], ["ops"], ["comparators"], ["target"], ["iter"], ["ifs"], ["Subscript"], ["Eq"], ["Num"], ["Name"], ["Name"], ["value"], ["slice"], ["0"], ["item"], ["items"], ["Name"], ["Index"], ["item"], ["value"], ["Num"], ["2"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> check if the third element of all the lists in a list " items " is equal to zero . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: check if the third element of all the lists in a list " items " is equal to zero . <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` %d/%m/%Y ` to a string ` %d/%m/%Y `
Gold: represent datetime object ' 10/05/2012 ' with format ' %d/%m/%Y ' into format ' %Y-%m-%d '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["strftime"], ["%Y-%m-%d"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["strptime"], ["<unk>"], ["%d/%m/%Y"], ["Attribute"], ["value"], ["datetime"], ["Name"], ["datetime"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> datetime object ' <unk> ' with format ' <unk> ' into format ' %Y-%m-%d ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> datetime object ' <unk> ' with format ' <unk> ' into format ' %Y-%m-%d ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` : ` to a string ` : `
Gold: remove all spaces from a string converted from dictionary ` {'a': 1, 'b': 'as df'} `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["replace"], [","], [","], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["replace"], [":"], [":"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Dict"], ["str"], ["keys"], ["values"], ["Str"], ["Str"], ["Num"], ["Str"], ["a"], ["b"], ["1"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> remove all spaces from a string <unk> from dictionary ` <unk> 1, <unk> <unk> <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: remove all spaces from a string <unk> from dictionary ` <unk> 1, <unk> <unk> <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` soup ` to a string ` soup `
Gold: beautifulsoup find all tags with attribute ' name ' equal to ' description '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["findAll"], ["<unk>"], ["value"], ["Name"], ["Dict"], ["soup"], ["keys"], ["values"], ["Str"], ["Str"], ["name"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> beautifulsoup find all tags with attribute ' name ' equal to ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: beautifulsoup find all tags with attribute ' name ' equal to ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` A very specific bad thing happened ` to a string ` A very specific bad thing happened `
Gold: manually throw/raise a ` ValueError ` exception with the message ' A very specific bad thing happened '
Tree: [["Module"], ["body"], ["Raise"], ["exc"], ["cause"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["ValueError"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> <unk> a ` <unk> ` exception with the message ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> <unk> a ` <unk> ` exception with the message ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` words ` to a string ` words `
Gold: get a list of words ` words ` of a file ' myfile '
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["words"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["split"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["read"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["open"], ["myfile"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get a list of words ` words ` of a file ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get a list of words ` words ` of a file ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` 9 `
Gold: generate a random integer between 0 and 9
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Num"], ["Num"], ["randint"], ["0"], ["9"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> generate a random integer between 0 and 9 <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: generate a random integer between 0 and 9 <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` url `
Gold: replace percent-encoded code in request ` f ` to their single-character equivalent
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["f"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Call"], ["value"], ["urlopen"], ["url"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Attribute"], ["Call"], ["value"], ["request"], ["value"], ["unquote"], ["func"], ["args"], ["keywords"], ["Name"], ["Attribute"], ["Attribute"], ["Name"], ["urllib"], ["value"], ["parse"], ["value"], ["<unk>"], ["params"], ["Name"], ["Attribute"], ["urllib"], ["value"], ["parse"], ["Name"], ["urllib"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> replace <unk> code in request ` f ` to their <unk> <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: replace <unk> code in request ` f ` to their <unk> <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` 100 ` in a list ` 100 `
Gold: create dict of squared int values in range of 100
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["<unk>"], ["elt"], ["generators"], ["BinOp"], ["comprehension"], ["left"], ["op"], ["right"], ["target"], ["iter"], ["ifs"], ["Name"], ["Pow"], ["Num"], ["Name"], ["Call"], ["x"], ["2"], ["x"], ["func"], ["args"], ["keywords"], ["Name"], ["Num"], ["range"], ["100"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create dict of squared int values in range of 100 <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create dict of squared int values in range of 100 <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` j `
Gold: get a list of booleans ` z ` that shows wether the corresponding items in list ` x ` and ` y ` are equal
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["ListComp"], ["z"], ["elt"], ["generators"], ["Compare"], ["comprehension"], ["left"], ["ops"], ["comparators"], ["target"], ["iter"], ["ifs"], ["Name"], ["Eq"], ["Name"], ["Tuple"], ["Call"], ["i"], ["j"], ["elts"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["Name"], ["Name"], ["i"], ["j"], ["zip"], ["x"], ["y"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get a list of booleans ` z ` that <unk> <unk> the corresponding items in list ` x ` and ` y ` are equal <pad> <pad> <pad>
Seq Out: get a list of booleans ` z ` that <unk> <unk> the corresponding items in list ` x ` and ` y ` are equal <eos> <pad> <pad> <pad>

Predict: get a list of a list ` next `
Gold: retrieve an arbitrary value from dictionary ` dict `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["next"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["iter"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["values"], ["Name"], ["dict"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> retrieve an arbitrary value from dictionary ` dict ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: retrieve an arbitrary value from dictionary ` dict ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` strs `
Gold: create list of ' size ' empty strings
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["ListComp"], ["strs"], ["elt"], ["generators"], ["Str"], ["comprehension"], ["<pad>"], ["target"], ["iter"], ["ifs"], ["Name"], ["Call"], ["x"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["range"], ["size"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create list of ' size ' empty strings <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create list of ' size ' empty strings <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` utf-8-sig ` to a string ` utf-8-sig `
Gold: convert utf-8 with bom string ` s ` to utf-8 with no bom ` u `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["u"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["decode"], ["utf-8-sig"], ["Name"], ["s"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert utf-8 with <unk> string ` s ` to utf-8 with no <unk> ` u ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert utf-8 with <unk> string ` s ` to utf-8 with no <unk> ` u ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` ax ` to a string ` ax `
Gold: set an array of unicode characters ` [u'é', u'ã', u'â'] ` as labels in matplotlib ` ax `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["List"], ["value"], ["<unk>"], ["elts"], ["Name"], ["Str"], ["Str"], ["Str"], ["ax"], ["<unk>"], ["<unk>"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> set an array of unicode characters ` <unk> <unk> <unk> ` as labels in matplotlib ` ax ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: set an array of unicode characters ` <unk> <unk> <unk> ` as labels in matplotlib ` ax ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` [^a-zA-Z0-9-]+ ` to a string ` [^a-zA-Z0-9-]+ `
Gold: how to exclude a character from a regex group ?
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["compile"], ["<unk>"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> how to exclude a character from a regex group ? <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: how to exclude a character from a regex group ? <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df ` to a list ` df `
Gold: change nan values in dataframe ` df ` using preceding values in the frame
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["keyword"], ["value"], ["fillna"], ["<unk>"], ["value"], ["inplace"], ["value"], ["Name"], ["Str"], ["NameConstant"], ["df"], ["ffill"], ["True"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> change nan values in dataframe ` df ` using <unk> values in the frame <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: change nan values in dataframe ` df ` using <unk> values in the frame <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` /dir/file.ext ` to a string ` /dir/file.ext `
Gold: copy file " /dir/file.ext " to " /new/dir/newname.ext "
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["<unk>"], ["/dir/file.ext"], ["<unk>"], ["Name"], ["shutil"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> copy file " <unk> " to " <unk> " <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: copy file " <unk> " to " <unk> " <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` url ` in a string ` url `
Gold: slice ` url ` with ' & ' as delimiter to get " http://www.domainname.com/page?CONTENT_ITEM_ID=1234 " from url `` http : //www.domainname.com/page ? content_item_id=1234 & param2 & param3 ''
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["split"], ["&"], ["Name"], ["url"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> slice ` url ` with ' & ' as delimiter to get " <unk> " from url <unk> http : <unk> ? <unk> & <unk> & <unk> ''
Seq Out: slice ` url ` with ' & ' as delimiter to get " <unk> " from url <unk> http : <unk> ? <unk> & <unk> & <unk> '' <eos>

Predict: get a list of list ` index ` to a list ` b `
Gold: create list ` c ` containing items from list ` b ` whose index is in list ` index `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["ListComp"], ["c"], ["elt"], ["generators"], ["Subscript"], ["comprehension"], ["value"], ["slice"], ["target"], ["iter"], ["ifs"], ["Name"], ["Index"], ["Name"], ["Name"], ["b"], ["value"], ["i"], ["index"], ["Name"], ["i"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create list ` c ` containing items from list ` b ` whose index is in list ` index ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create list ` c ` containing items from list ` b ` whose index is in list ` index ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` script2.py 1 ` to a string ` script2.py 1 `
Gold: run python script ' script2.py 1 ' from another python script , passing in script2.py 1 as an argument
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["system"], ["<unk>"], ["Name"], ["os"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> run python script ' <unk> ' from another python script , <unk> in <unk> as an argument <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: run python script ' <unk> ' from another python script , <unk> in <unk> as an argument <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` s ` to a string ` s `
Gold: convert a date string ` s ` to a datetime object
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Str"], ["value"], ["strptime"], ["s"], ["<unk>"], ["Attribute"], ["value"], ["datetime"], ["Name"], ["datetime"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert a date string ` s ` to a datetime object <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert a date string ` s ` to a datetime object <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` a `
Gold: delete the element 6 from list ` a `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Num"], ["value"], ["remove"], ["6"], ["Name"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> delete the element 6 from list ` a ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: delete the element 6 from list ` a ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` myDict ` in a list ` myDict `
Gold: execute sql statement ` sql ` with values of dictionary ` myDict ` as parameters
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Call"], ["value"], ["execute"], ["<unk>"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Call"], ["cursor"], ["list"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["values"], ["Name"], ["myDict"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> execute sql statement ` sql ` with values of dictionary ` myDict ` as parameters <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: execute sql statement ` sql ` with values of dictionary ` myDict ` as parameters <eos> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list ` argparse ` to a list ` argparse `
Gold: disable abbreviation in argparse
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["parser"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["<unk>"], ["<unk>"], ["value"], ["Name"], ["NameConstant"], ["<unk>"], ["False"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> disable <unk> in argparse <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: disable <unk> in argparse <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` A `
Gold: write all tuple of tuples ` A ` at once into csv file
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["value"], ["<unk>"], ["A"], ["Name"], ["writer"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> write all tuple of tuples ` A ` at once into csv file <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: write all tuple of tuples ` A ` at once into csv file <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` getcode ` to a string ` getcode `
Gold: checking if website " http://www.stackoverflow.com " is up
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["print"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["<unk>"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["urlopen"], ["<unk>"], ["Attribute"], ["value"], ["request"], ["Name"], ["urllib"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> if <unk> " <unk> " is up <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> if <unk> " <unk> " is up <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` date `
Gold: how do i convert datetime to date ( in python ) ?
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["date"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["now"], ["Attribute"], ["value"], ["datetime"], ["Name"], ["datetime"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> how do i convert datetime to date ( in python ) ? <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: how do i convert datetime to date ( in python ) ? <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` LoD `
Gold: create a set containing all keys names from list of dictionaries ` LoD `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["ListComp"], ["set"], ["elt"], ["generators"], ["Name"], ["comprehension"], ["comprehension"], ["i"], ["target"], ["iter"], ["ifs"], ["target"], ["iter"], ["ifs"], ["Name"], ["ListComp"], ["Name"], ["Name"], ["s"], ["elt"], ["generators"], ["i"], ["s"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Call"], ["Name"], ["Name"], ["list"], ["func"], ["args"], ["keywords"], ["d"], ["LoD"], ["Attribute"], ["value"], ["keys"], ["Name"], ["d"], ["<pad>"]]
Seq In: <sos> create a set containing all keys names from list of dictionaries ` LoD ` <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: create a set containing all keys names from list of dictionaries ` LoD ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` dict `
Gold: iterate over a dictionary ` dict ` in sorted order
Tree: [["Module"], ["body"], ["Return"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["sorted"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["items"], ["Name"], ["dict"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> iterate over a dictionary ` dict ` in sorted order <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: iterate over a dictionary ` dict ` in sorted order <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` a ` to a string ` a `
Gold: delete the element ` c ` from list ` a `
Tree: [["Module"], ["body"], ["If"], ["test"], ["body"], ["orelse"], ["Compare"], ["Expr"], ["left"], ["ops"], ["comparators"], ["value"], ["Name"], ["In"], ["Name"], ["Call"], ["c"], ["a"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["value"], ["remove"], ["c"], ["Name"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> delete the element ` c ` from list ` a ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: delete the element ` c ` from list ` a ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list ` d ` to a list ` d `
Gold: iterating key and items over dictionary ` d `
Tree: [["Module"], ["body"], ["For"], ["target"], ["iter"], ["body"], ["orelse"], ["Tuple"], ["Call"], ["Pass"], ["elts"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["Call"], ["k"], ["v"], ["list"], ["func"], ["args"], ["keywords"], ["Attribute"], ["value"], ["items"], ["Name"], ["d"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> iterating key and items over dictionary ` d ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: iterating key and items over dictionary ` d ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` where ` to a string ` where `
Gold: find rows matching ` (0,1) ` in a 2 dimensional numpy array ` vals `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["value"], ["where"], ["func"], ["args"], ["keywords"], ["Name"], ["Attribute"], ["keyword"], ["np"], ["value"], ["all"], ["axis"], ["value"], ["Compare"], ["Num"], ["left"], ["ops"], ["comparators"], ["1"], ["Name"], ["Eq"], ["Tuple"], ["<unk>"], ["elts"], ["Num"], ["Num"], ["0"], ["1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> find rows matching ` <unk> ` in a 2 dimensional numpy array ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: find rows matching ` <unk> ` in a 2 dimensional numpy array ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` " <unk> " <unk> " <unk> " <unk> " '
Gold: escaping quotes in string
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["Str"], ["replace"], ["<unk>"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> <unk> quotes in string <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: <unk> quotes in string <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` df `
Gold: get the row names from index in a pandas data frame
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Attribute"], ["value"], ["index"], ["Name"], ["df"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get the row names from index in a pandas data frame <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get the row names from index in a pandas data frame <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` a ` to a list ` b `
Gold: combine two lists ` [1, 2, 3, 4] ` and ` ['a', 'b', 'c', 'd'] ` into a dictionary
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["dict"], ["func"], ["args"], ["keywords"], ["Name"], ["List"], ["List"], ["zip"], ["elts"], ["elts"], ["Num"], ["Num"], ["Num"], ["Num"], ["Str"], ["Str"], ["Str"], ["Str"], ["1"], ["2"], ["3"], ["4"], ["a"], ["b"], ["c"], ["d"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> combine two lists ` [1, 2, 3, 4] ` and ` ['a', 'b', 'c', 'd'] ` into a dictionary <pad> <pad>
Seq Out: combine two lists ` [1, 2, 3, 4] ` and ` ['a', 'b', 'c', 'd'] ` into a dictionary <eos> <pad> <pad>

Predict: get a string ` [-+]?\d*\.\d+|\d+ ` to a string ` [-+]?\d*\.\d+|\d+ `
Gold: extract floating point numbers from a string ' Current Level: -13.2 db or 14.2 or 3 '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["findall"], ["<unk>"], ["<unk>"], ["Name"], ["re"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> extract floating point numbers from a string ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: extract floating point numbers from a string ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` a ` <unk> ` '
Gold: append a pandas series ` b ` to the series ` a ` and get a continuous index
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["value"], ["reset_index"], ["drop"], ["value"], ["Call"], ["NameConstant"], ["func"], ["args"], ["keywords"], ["True"], ["Attribute"], ["Name"], ["value"], ["append"], ["b"], ["Name"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> append a pandas series ` b ` to the series ` a ` and get a <unk> index <pad> <pad> <pad>
Seq Out: append a pandas series ` b ` to the series ` a ` and get a <unk> index <eos> <pad> <pad> <pad>

Predict: get a string ` redirect ` to a string ` redirect `
Gold: django redirect to view ' Home.views.index '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Str"], ["<unk>"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> django <unk> to <unk> ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: django <unk> to <unk> ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` /path/to/2014_07_13_test ` to a string ` /path/to/2014_07_13_test `
Gold: add a path ` /path/to/2014_07_13_test ` to system path
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["append"], ["<unk>"], ["Attribute"], ["value"], ["path"], ["Name"], ["sys"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> add a path ` <unk> ` to system path <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: add a path ` <unk> ` to system path <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of list ` data `
Gold: get a list of lists with summing the values of the second element from each list of lists ` data `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["ListComp"], ["elt"], ["generators"], ["List"], ["comprehension"], ["elts"], ["target"], ["iter"], ["ifs"], ["Call"], ["Name"], ["Name"], ["func"], ["args"], ["keywords"], ["i"], ["data"], ["Name"], ["ListComp"], ["sum"], ["elt"], ["generators"], ["Subscript"], ["comprehension"], ["value"], ["slice"], ["target"], ["iter"], ["ifs"], ["Name"], ["Index"], ["Name"], ["Name"], ["x"], ["value"], ["x"], ["i"], ["Num"], ["1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get a list of lists with summing the values of the second element from each list of lists ` data `
Seq Out: get a list of lists with summing the values of the second element from each list of lists ` data ` <eos>

Predict: get a string ` 2010-11-13 10:33:54.227806 ` to a string ` 2010-11-13 10:33:54.227806 `
Gold: convert a datetime string back to a datetime object of format ' %Y-%m-%d %H:%M:%S.%f '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["Str"], ["value"], ["strptime"], ["<unk>"], ["<unk>"], ["Name"], ["datetime"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> convert a datetime string <unk> to a datetime object of format ' <unk> ' <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: convert a datetime string <unk> to a datetime object of format ' <unk> ' <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` utf-8 ` to a string ` ▲ `
Gold: print a character that has unicode value ` ▲ `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["print"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["encode"], ["utf-8"], ["Str"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> print a character that has unicode value ` <unk> ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: print a character that has unicode value ` <unk> ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` list1 `
Gold: concatenating values in ` list1 ` to a string
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Name"], ["Call"], ["str1"], ["func"], ["args"], ["keywords"], ["Attribute"], ["GeneratorExp"], ["value"], ["join"], ["elt"], ["generators"], ["Str"], ["Call"], ["comprehension"], ["<pad>"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["Name"], ["Name"], ["str"], ["e"], ["e"], ["list1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> concatenating values in ` list1 ` to a string <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: concatenating values in ` list1 ` to a string <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` df `
Gold: sort each row in a pandas dataframe ` df ` in descending order
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["keyword"], ["value"], ["sort"], ["axis"], ["value"], ["ascending"], ["value"], ["Name"], ["Num"], ["NameConstant"], ["df"], ["1"], ["False"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sort each row in a pandas dataframe ` df ` in descending order <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sort each row in a pandas dataframe ` df ` in descending order <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list ` df ` to a list ` df `
Gold: get all the values in column ` b ` from pandas data frame ` df `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Subscript"], ["value"], ["slice"], ["Name"], ["Index"], ["df"], ["value"], ["Str"], ["b"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get all the values in column ` b ` from pandas data frame ` df ` <pad> <pad> <pad> <pad> <pad>
Seq Out: get all the values in column ` b ` from pandas data frame ` df ` <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a list ` array ` to a string ` array `
Gold: reverse a list ` array `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["list"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["reversed"], ["array"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> reverse a list ` array ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: reverse a list ` array ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` l `
Gold: sum of product of combinations in a list ` l `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["ListComp"], ["sum"], ["elt"], ["generators"], ["BinOp"], ["comprehension"], ["left"], ["op"], ["right"], ["target"], ["iter"], ["ifs"], ["Name"], ["Mult"], ["Name"], ["Tuple"], ["Call"], ["i"], ["j"], ["elts"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["Name"], ["Call"], ["i"], ["j"], ["list"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Name"], ["Num"], ["value"], ["combinations"], ["l"], ["2"], ["Name"], ["itertools"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> sum of product of <unk> in a list ` l ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: sum of product of <unk> in a list ` l ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` my_list `
Gold: from a list of strings ` my_list ` , remove the values that contains numbers .
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["ListComp"], ["elt"], ["generators"], ["Name"], ["comprehension"], ["x"], ["target"], ["iter"], ["ifs"], ["Name"], ["Name"], ["UnaryOp"], ["x"], ["my_list"], ["op"], ["operand"], ["Not"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["GeneratorExp"], ["any"], ["elt"], ["generators"], ["Call"], ["comprehension"], ["func"], ["args"], ["keywords"], ["target"], ["iter"], ["ifs"], ["Attribute"], ["Name"], ["Name"], ["value"], ["isdigit"], ["c"], ["x"], ["Name"], ["c"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> from a list of strings ` my_list ` , remove the values that contains numbers . <pad> <pad> <pad> <pad> <pad>
Seq Out: from a list of strings ` my_list ` , remove the values that contains numbers . <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of a list ` l1 `
Gold: create a list of aggregation of each element from list ` l2 ` to all elements of list ` l1 `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["ListComp"], ["elt"], ["generators"], ["BinOp"], ["comprehension"], ["comprehension"], ["left"], ["op"], ["right"], ["target"], ["iter"], ["ifs"], ["target"], ["iter"], ["ifs"], ["Name"], ["Add"], ["Name"], ["Name"], ["Name"], ["Name"], ["Name"], ["x"], ["y"], ["x"], ["l2"], ["y"], ["l1"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> create a list of <unk> of each element from list ` l2 ` to all elements of list ` l1 `
Seq Out: create a list of <unk> of each element from list ` l2 ` to all elements of list ` l1 ` <eos>

Predict: get a string ` c ` to a string ` c `
Gold: converting byte string ` c ` in unicode string
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["decode"], ["unicode_escape"], ["Name"], ["c"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> converting byte string ` c ` in unicode string <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: converting byte string ` c ` in unicode string <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list ` df ` to a list ` df ` with a list
Gold: get element at index 0 of each list in column ' value ' of dataframe ` df `
Tree: [["Module"], ["body"], ["Assign"], ["targets"], ["value"], ["Subscript"], ["Call"], ["value"], ["slice"], ["func"], ["args"], ["keywords"], ["Name"], ["Index"], ["Attribute"], ["Num"], ["df"], ["value"], ["value"], ["get"], ["0"], ["Str"], ["Attribute"], ["value"], ["value"], ["str"], ["Subscript"], ["value"], ["slice"], ["Name"], ["Index"], ["df"], ["value"], ["Str"], ["value"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get element at index 0 of each list in column ' value ' of dataframe ` df ` <pad> <pad> <pad>
Seq Out: get element at index 0 of each list in column ' value ' of dataframe ` df ` <eos> <pad> <pad> <pad>

Predict: get a list of a list ` my_string ` in a list ` my_string `
Gold: how do i read the first line of a string ?
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Subscript"], ["value"], ["slice"], ["Call"], ["Index"], ["func"], ["args"], ["keywords"], ["value"], ["Attribute"], ["Str"], ["Num"], ["Num"], ["value"], ["split"], ["[LINE]"], ["1"], ["0"], ["Name"], ["my_string"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> how do i read the first line of a string ? <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: how do i read the first line of a string ? <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` a ` to a list ` a `
Gold: get all possible combination of items from 2-dimensional list ` a `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Call"], ["list"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Starred"], ["value"], ["product"], ["value"], ["Name"], ["Name"], ["itertools"], ["a"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get all possible combination of items from <unk> list ` a ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get all possible combination of items from <unk> list ` a ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` test ` to a string ` test `
Gold: execute a post request to url ` http://httpbin.org/post ` with json data ` {'test': 'cheers'} `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["keyword"], ["value"], ["post"], ["<unk>"], ["json"], ["value"], ["Name"], ["Dict"], ["requests"], ["keys"], ["values"], ["Str"], ["Str"], ["test"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> execute a post request to url ` <unk> ` with json data ` <unk> <unk> ` <pad> <pad> <pad> <pad> <pad>
Seq Out: execute a post request to url ` <unk> ` with json data ` <unk> <unk> ` <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a list ` line `
Gold: read line by line from stdin
Tree: [["Module"], ["body"], ["For"], ["target"], ["iter"], ["body"], ["orelse"], ["Name"], ["Attribute"], ["Pass"], ["line"], ["value"], ["stdin"], ["Name"], ["sys"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> read line by line from stdin <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: read line by line from stdin <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a string ` items `
Gold: get the size of list ` items `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["len"], ["items"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get the size of list ` items ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: get the size of list ` items ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list of list ` lst `
Gold: convert list ` lst ` of key , value pairs into a dictionary
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["ListComp"], ["dict"], ["elt"], ["generators"], ["Tuple"], ["comprehension"], ["elts"], ["target"], ["iter"], ["ifs"], ["Subscript"], ["Call"], ["Name"], ["Name"], ["value"], ["slice"], ["func"], ["args"], ["keywords"], ["e"], ["lst"], ["Name"], ["Index"], ["Name"], ["Subscript"], ["e"], ["value"], ["int"], ["value"], ["slice"], ["Num"], ["Name"], ["Index"], ["0"], ["e"], ["value"], ["Num"], ["1"], ["<pad>"]]
Seq In: <sos> convert list ` lst ` of key , value pairs into a dictionary <pad> <pad> <pad> <pad> <pad>
Seq Out: convert list ` lst ` of key , value pairs into a dictionary <eos> <pad> <pad> <pad> <pad> <pad>

Predict: get a list of a list ` s ` with a list ` s `
Gold: pandas read comma-separated csv file ` s ` and skip commented lines starting with ' # '
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Call"], ["keyword"], ["keyword"], ["value"], ["read_csv"], ["func"], ["args"], ["keywords"], ["sep"], ["value"], ["<unk>"], ["value"], ["Name"], ["Name"], ["Name"], ["Str"], ["Str"], ["pd"], ["<unk>"], ["s"], [","], ["#"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> pandas read comma-separated csv file ` s ` and <unk> <unk> lines starting with ' <unk> ' <pad>
Seq Out: pandas read comma-separated csv file ` s ` and <unk> <unk> lines starting with ' <unk> ' <eos> <pad>

Predict: get a list of a list ` df ` to a list ` df `
Gold: select rows of dataframe ` df ` whose value for column ` A ` is ` foo `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Subscript"], ["print"], ["value"], ["slice"], ["Attribute"], ["Index"], ["value"], ["loc"], ["value"], ["Name"], ["Compare"], ["df"], ["left"], ["ops"], ["comparators"], ["Subscript"], ["Eq"], ["Str"], ["value"], ["slice"], ["foo"], ["Name"], ["Index"], ["df"], ["value"], ["Str"], ["A"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> select rows of dataframe ` df ` whose value for column ` A ` is ` foo `
Seq Out: select rows of dataframe ` df ` whose value for column ` A ` is ` foo ` <eos>

Predict: get a list ` legend ` to a string ` legend `
Gold: change legend size to ' x-small ' in upper-left location
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["keyword"], ["keyword"], ["value"], ["legend"], ["loc"], ["value"], ["<unk>"], ["value"], ["Name"], ["Num"], ["Str"], ["<unk>"], ["2"], ["<unk>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> change legend size to ' <unk> ' in <unk> <unk> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: change legend size to ' <unk> ' in <unk> <unk> <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

Predict: sort a list ` d ` with a list ` d `
Gold: get dictionary with max value of key ' size ' in list of dicts ` ld `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Name"], ["Name"], ["keyword"], ["max"], ["<unk>"], ["key"], ["value"], ["Lambda"], ["args"], ["body"], ["arguments"], ["Subscript"], ["args"], ["vararg"], ["kwonlyargs"], ["kw_defaults"], ["kwarg"], ["defaults"], ["value"], ["slice"], ["arg"], ["Name"], ["Index"], ["d"], ["annotation"], ["d"], ["value"], ["Str"], ["size"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> get dictionary with max value of key ' size ' in list of dicts ` <unk> ` <pad>
Seq Out: get dictionary with max value of key ' size ' in list of dicts ` <unk> ` <eos> <pad>

Predict: get a string ` foo ` to a string ` foo `
Gold: append string ` foo ` to list ` list `
Tree: [["Module"], ["body"], ["Expr"], ["value"], ["Call"], ["func"], ["args"], ["keywords"], ["Attribute"], ["Str"], ["value"], ["append"], ["foo"], ["Name"], ["list"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"], ["<pad>"]]
Seq In: <sos> append string ` foo ` to list ` list ` <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>
Seq Out: append string ` foo ` to list ` list ` <eos> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>

